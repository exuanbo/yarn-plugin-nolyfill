import { structUtils, type Plugin, type Hooks } from '@yarnpkg/core';

const autoGeneratedPackagesList = [
  ['array-includes'],
  ['array.prototype.findlastindex'],
  ['array.prototype.findlast'],
  ['array.prototype.at'],
  ['string.prototype.at'],
  ['array.prototype.flat'],
  ['array.prototype.flatmap'],
  ['arraybuffer.prototype.slice'],
  ['function.prototype.name'],
  ['has'],
  ['object-keys'],
  ['object.assign'],
  ['object.entries'],
  ['object.fromentries'],
  ['object.hasown'],
  ['object.values'],
  ['string.prototype.trim'],
  ['string.prototype.trimend'],
  ['string.prototype.trimstart'],
  ['string.prototype.trimleft'],
  ['string.prototype.trimright'],
  ['string.prototype.matchall'],
  ['regexp.prototype.flags'],
  ['globalthis'],
  ['array.prototype.tosorted'],
  ['object.groupby'],
  ['array.prototype.find'],
  ['array.from'],
  ['string.prototype.padend'],
  ['string.prototype.padstart'],
  ['object.getownpropertydescriptors'],
  ['array.prototype.reduce'],
  ['object-is'],
  ['reflect.ownkeys'],
  // ['array.prototype.filter'],
  ['string.prototype.replaceall'],
  // ['array.prototype.map'],
  ['reflect.getprototypeof'],
  // ['object.getprototypeof'],
  ['es-aggregate-error'],
  ['promise.any', { '@nolyfill/es-aggregate-error': 'workspace:*' }, '>=12.4.0'],
  ['promise.allsettled'],
];

const singleFilePackagesList = [
  ['has-property-descriptors'],
  ['gopd'],
  ['has-proto'],
  ['get-symbol-description', { '@nolyfill/shared': 'workspace:*' }],
  ['is-array-buffer', { '@nolyfill/shared': 'workspace:*' }],
  ['is-shared-array-buffer', { '@nolyfill/shared': 'workspace:*' }],
  ['typed-array-buffer', { '@nolyfill/shared': 'workspace:*' }],
  ['typed-array-byte-length', { '@nolyfill/shared': 'workspace:*' }],
  ['typed-array-byte-offset', { '@nolyfill/shared': 'workspace:*' }],
  ['typed-array-length', { '@nolyfill/shared': 'workspace:*' }],
  ['harmony-reflect'],
  [
    'array-buffer-byte-length',
    { '@nolyfill/is-array-buffer': 'workspace:*', '@nolyfill/shared': 'workspace:*' },
  ],
  ['iterator.prototype'],
  ['available-typed-arrays'],
  ['which-typed-array', { '@nolyfill/shared': 'workspace:*' }],
  ['which-boxed-primitive'],
  ['unbox-primitive'],
  ['is-regex'],
  ['safe-regex-test'],
  ['safe-array-concat'],
  ['asynciterator.prototype'],
  ['is-weakref'],
  ['is-symbol'],
  ['is-string'],
  ['is-date-object'],
  ['es-set-tostringtag'],
  ['define-properties', { '@nolyfill/shared': 'workspace:*' }],
  ['deep-equal', { dequal: '2.0.3' }],
  ['is-arguments'],
  ['is-generator-function'],
  // ['is-negative-zero', 'module.exports = (n) => n === 0 && (1 / n) === -Infinity;'],
  ['side-channel'],
  ['internal-slot'],
];

const manualPackagesList = [
  'function-bind', // function-bind's main entry point is not uncurried, and doesn't follow es-shim API
  'has-tostringtag', // two entries (index.js, shams.js)
  'has-symbols', // two entries (index.js, shams.js)
  'es-iterator-helpers', // use rollup prebundle approach
  // 'globalthis' // globalthis package's entrypoint is a function, not the implementation
];

const allPackagesList = [
  ...manualPackagesList,
  ...autoGeneratedPackagesList.map((pkg) => pkg[0] as string),
  ...singleFilePackagesList.map((pkg) => pkg[0] as string),
].sort();

const PATCHES = new Map(
  allPackagesList.map((name) => [
    structUtils.makeIdent(null, name).identHash,
    structUtils.makeIdent('nolyfill', name),
  ]),
);

const plugin: Plugin<Hooks> = {
  hooks: {
    reduceDependency: async (dependency) => {
      const patchIdent = PATCHES.get(dependency.identHash);

      if (patchIdent) {
        const patchDescriptor = structUtils.makeDescriptor(patchIdent, 'latest');

        const range = structUtils.makeRange({
          protocol: 'npm:',
          source: null,
          selector: structUtils.stringifyDescriptor(patchDescriptor),
          params: null,
        });

        const patchedDescriptor = structUtils.makeDescriptor(dependency, range);

        return patchedDescriptor;
      }

      return dependency;
    },
  },
};

export default plugin;
